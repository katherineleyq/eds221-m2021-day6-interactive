---
title: "eds221-day6-activity1"
format: html
editor: visual
execute:
    warning: FALSE
---

```{r}
library(tidyverse)
```

## Warm Up

Write code for:

"brown bear, brown bear, what do you see? I see a red bird looking at me"

"red bird, red bird, what do you see? I see a yellow duck looking at me"

"yellow duck, yellow duck, what do you see? I see a blue horse looking at me"

```{r}
# my answer: 
vec <- c("brown bear", "red bird", "yellow duck", "blue horse")

for (i in seq_along(vec)) {
  print(paste(vec[i],
              ",",
              vec[i],
              ",",
              "what do you see? I see a",
              vec[i],
              "looking at me"))
}
```

```{r}
# right answer

animals <- c("brown bear", "red bird", "yellow duck", "blue horse")

for (i in 1:(length(animals) - 1)) {
  print(paste(animals[i], animals[i],
              "what do you see? I see a",
              animals[i+1],
              "look at me."))
}
```

# Tidy Data Notes

Tidy data is a predictable way of organizing data

1.  Each variable is a column
2.  Each observation is a row
3.  Each cell contains a single value

Variable: a characteristic that is being measured, counted or described with data

Observation: a single "data point" for which the measure, count or description of one or more variables is recorded.

Value: the recorded measure, count, or description of a variable

## TidyR

1.  tidyr::pivot_longer() = gather columns (convert from wide to long format)
2.  tidyr::pivot_wider() = spread columns (convert from long to wide format)
3.  tidyr::separate() = separate elements in a single column into multiple columns, using a separator you specify, so that each variable is in a single column

### pivot_longer() example

| dog_name | week_1 | week_2 | week_3 |
|----------|--------|--------|--------|
| teddy    | 20     | 21     | 18     |
| khora    | 17     | 24     | 25     |

```{r}
# I don't want to make dogs df, but it's the above data frame
# dogs_longer <- dogs %>%
#   tidyr::pivot_longer(week_1:week_3,
#                      names_to = week,
#                      values_to = miles)
```

### pivot_wider() example

| world     | variable   | value   |
|-----------|------------|---------|
| Tattooine | population | 200,000 |
| Endor     | population | 43,000  |
| Tattooine | radius     | 3,182.4 |
| Endor     | radius     | 2,986.1 |

```{r}
# example
# planets_long <- planets %>%
#  tidyr::pivot_wider(names_from = variable,
#                     values_from = value)
```

### tidyr::separate()

| name           | height | mass  | hair_color |
|----------------|--------|-------|------------|
| Luke Skywalker | 172    | 77.0  | blond      |
| C-3PO          | 167    | 75.0  | NA         |
| R2-D2          | 96     | 32.0  | NA         |
| Darth Vader    | 202    | 136.0 | none       |
| Leia Organa    | 150    | 49.0  | brown      |

```{r}
# example
starwars %>%
  separate(col = name,
           into = c("first_name", "last_name"),
           sep = " ")
```

# Day 6 Interactive Session 1

```{r}
library(tidyverse)
library(here)
library(janitor)
```

```{r}
wb_indicators <- read_csv(here("data", "wb_indicators.csv"), na = c("..", ""))
```

```{r}
# melting year columns
wb_indicators_long <- wb_indicators %>%
  pivot_longer(cols = `2001 [YR2001]`:`2020 [YR2020]`,
               names_to = 'year',
               values_to = 'indicator_value')
```

```{r}
# separating new year column, then drop year_chr
wb_indicators_clean <- wb_indicators_long %>%
  separate(col = year,
           into = c("year", "year_chr"),
           sep = " ") %>% 
  dplyr::select(-`year_chr`, -`Country Code`, -`Series Code`)
  
```

```{r}
# for wb_indicators_clean, 'Series Name' has multiple variables in one column.
# you can use unique() to see all the unique elements within column
unique(wb_indicators_clean$`Series Name`)
```

```{r}
# to clean up the above
# drop_na() would delete every row with NA in Series Name so use it sparingly
wb_indicators_tidy <- wb_indicators_clean %>% 
  tidyr::drop_na(`Series Name`) %>% 
  tidyr::pivot_wider(names_from = `Series Name`,
                     values_from = indicator_value)
```

```{r}
# cleaning up column names, turn year from charactor to numeric

# one way, but it's bad because it's based on position
# names(wb_indicators_tidy) <- c("country", 
#                                "year", 
#                                "access_clean_fuels_pp",
#                                "access_electricity_pp",
#                                "co2_emissions_kt",
#                                "fossil_fuel_cons_pt",
#                                "water_stress")
wb_indicators_tidy_final <- wb_indicators_tidy %>% 
  dplyr::rename(country = "Country Name",
                access_clean_fuels_pp = "Access to clean fuels and technologies for cooking (% of population)",
                access_electricity_pp = "Access to electricity (% of population)",
                co2_emissions_kt = "CO2 emissions (kt)",
                fossil_fuel_cons_pt = "Fossil fuel energy consumption (% of total)",
                water_stress = "Level of water stress: freshwater withdrawal as a proportion of available freshwater resources") %>% 
  dplyr::mutate(year = as.numeric(year))
```

```{r}
# let's make a chart with our new tidy data
ggplot(data = wb_indicators_tidy_final, 
       aes(x = year, y = co2_emissions_kt)) +
         geom_line(aes(color = country)) +
  theme(legend.position = "none")
```
